# Copyright (c) 2010-2024, Lawrence Livermore National Security, LLC. Produced
# at the Lawrence Livermore National Laboratory. All Rights reserved. See files
# LICENSE and NOTICE for details. LLNL-CODE-806117.
#
# This file is part of the MFEM library. For more information and source code
# availability visit https://mfem.org.
#
# MFEM is free software; you can redistribute it and/or modify it under the
# terms of the BSD-3 license. We welcome feedback and contributions, see file
# CONTRIBUTING.md for details.

# build-pymfem
#
# This action intentionally does *not* incorporate other workflow actions such as `build-mfem`.
# PyMFEM's build process is a superset of MFEM's build process, and we want to ensure that PyMFEM
# is able to correctly build MFEM.
# This action builds PyMFEM in three stages:
#   - MFEM dependencies + MFEM
#   - SWIG bindings
#   - PyMFEM

name: build-pymfem

inputs:
  os:
    description: 'Operating system'
    default: 'ubuntu-latest'
    enum: ['ubuntu-latest', 'macos-latest']
  python-version:
    description: 'Python version'
    default: '3.9'
    enum: ['3.7', '3.8', '3.9', '3.10', '3.11']
  mfem-branch:
    description: 'MFEM branch to checkout'
    default: 'default' # 'default' uses a specific commit hash defined in setup.py:repos_sha
    enum: ['default', 'master']
  parallel:
    description: 'Build parallel version'
    default: false
  cuda:
    description: 'Build with CUDA'
    default: false
  cuda-toolkit-version:
    default: '12.4.1'
  cuda-driver-version:
    default: '550.54.15'
  libceed:
    description: 'Build with libCEED'
    default: false
  gslib:
    description: 'Build with GSlib'
    default: false
  phases:
    description: 'When true, run each build step individually (mfem, swig, pymfem)'
    default: true


runs:
  using: "composite"
  steps:
  # -------------------------------------------------------------------------------------------------
  # Config
  # -------------------------------------------------------------------------------------------------
  - name: Validate inputs
    run: |
      if [[ "${{ inputs.os }}" == "macos-latest" && "${{ inputs.cuda }}" == "true" ]]; then
        echo "Error: CUDA is not supported on macOS"
        exit 1
      fi
    shell: bash

  # Reference for $${{ x && y || z }} syntax: https://7tonshark.com/posts/github-actions-ternary-operator/
  # These are all passed to setup.py as one concatenated string
  - name: Set build flags
    run: |
      echo "BUILD_FLAGS=${{ inputs.parallel && '--with-parallel' || '' }} \
      ${{ inputs.cuda && '--with-cuda' || '' }} \
      ${{ inputs.libceed && '--with-libceed' || '' }} \
      ${{ inputs.gslib && '--with-gslib' || '' }} \
      ${{ (!(inputs.mfem-branch == 'default') && format('--mfem-branch=''{0}''', inputs.mfem-branch)) || '' }}" >> $GITHUB_ENV
    shell: bash

  # -------------------------------------------------------------------------------------------------
  # Setup base environment
  # -------------------------------------------------------------------------------------------------
  - name: Checkout the PyMFEM repo
    uses: actions/checkout@v4
    with:
      repository: 'mfem/PyMFEM'

  - name: Set up Python ${{ inputs.python-version }}
    uses: actions/setup-python@v5
    with:
      python-version: ${{ inputs.python-version }}

  # -------------------------------------------------------------------------------------------------
  # Download/install dependencies
  # -------------------------------------------------------------------------------------------------
  - name: Install core dependencies via requirements.txt
    run: pip install -r requirements.txt --verbose
    shell: bash

  - name: Install MPI
    if: inputs.parallel
    run: |
      sudo apt-get install mpich libmpich-dev
      pip install mpi4py
    shell: bash

  - name: Cache CUDA
    if: inputs.cuda
    id: cache-cuda
    uses: actions/cache@v4
    with:
      path: ~/cache
      key: cuda-installer-${{ inputs.cuda-toolkit-version }}-${{ inputs.cuda-driver-version }}

  - name: Download CUDA
    if: inputs.cuda && steps.cache-cuda.outputs.cache-hit == false
    run: |
      CUDA_URL="https://developer.download.nvidia.com/compute/cuda/${{ inputs.cuda-toolkit-version }}/local_installers/cuda_${{ inputs.cuda-toolkit-version }}_${{ inputs.cuda-driver-version }}_linux.run"
      curl -o ~/cache/cuda.run --create-dirs $CUDA_URL
    shell: bash

  - name: Install CUDA
    if: inputs.cuda
    run: |
      # The --silent flag is necessary to bypass user-input, e.g. accepting the EULA
      sudo sh ~/cache/cuda.run --silent --toolkit
      echo "/usr/local/cuda/bin" >> $GITHUB_PATH
    shell: bash

  - name: Print dependency information
    run: |
      pip list
      printf "\n\n---------- MPI ----------\n"
      mpiexec --version || printf "MPI not installed"
      printf "\n\n---------- CUDA ----------\n"
      nvcc --version || printf "CUDA not installed"
    shell: bash

  # -------------------------------------------------------------------------------------------------
  # Build MFEM + SWIG Bindings + PyMFEM
  # -------------------------------------------------------------------------------------------------

  - name: Build MFEM (step 1)
    if: inputs.phases
    run: python setup.py install --ext-only --vv ${{ env.BUILD-FLAGS }}
    shell: bash

  - name: Build SWIG wrappers (step 2)
    if: inputs.phases
    run: python setup.py install --swig --vv ${{ env.BUILD-FLAGS }}
    shell: bash

  - name: Build PyMFEM (step 3)
    if: inputs.phases
    run: python setup.py install --skip-ext --skip-swig --vv ${{ env.BUILD-FLAGS }}
    shell: bash

  - name: Build all (steps 1-3)
    if: inputs.phases == false
    run: python setup.py install --vv ${{ env.BUILD-FLAGS }}
    shell: bash

  # -------------------------------------------------------------------------------------------------
  # Run tests
  # -------------------------------------------------------------------------------------------------
  - name: Run tests (serial)
    if: inputs.parallel == false
    run: |
      cd test
      python run_examples.py -serial -verbose
    shell: bash

  - name: Run tests (parallel)
    if: inputs.parallel
    run: |
      cd test
      python run_examples.py -parallel -verbose -np 2
    shell: bash

  # -------------------------------------------------------------------------------------------------
  # Generate an artifact (output of tests) on failure
  # -------------------------------------------------------------------------------------------------
  - name: Generate test results artifact
    id: generate-artifact
    run: |
      tar -cvzf sandbox.tar.gz test/sandbox
      # generate a name for the artifact
      txt=$(python -c "import datetime;print(datetime.datetime.now().strftime('%H_%M_%S_%f'))")
      echo name="test_results_"${txt}"_"${{ github.run_id }}".tar.gz" >> $GITHUB_OUTPUT
    shell: bash

  - name: Upload Artifact
    uses: actions/upload-artifact@v4
    if: failure()
    with:
        name: ${{ steps.generate-artifact.outputs.name }}
        path: sandbox.tar.gz
        retention-days: 1
