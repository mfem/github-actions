# Copyright (c) 2010-2021, Lawrence Livermore National Security, LLC. Produced
# at the Lawrence Livermore National Laboratory. All Rights reserved. See files
# LICENSE and NOTICE for details. LLNL-CODE-806117.
#
# This file is part of the MFEM library. For more information and source code
# availability visit https://mfem.org.
#
# MFEM is free software; you can redistribute it and/or modify it under the
# terms of the BSD-3 license. We welcome feedback and contributions, see file
# CONTRIBUTING.md for details.

name: build-mfem

inputs:
  os:
    description: 'os'
    required: true
  target:
    description: 'Type of target (dbg, opt)'
    required: false
    default: opt
  mpi:
    description: 'MPI status'
    required: false
    default: par
  codecov:
    description: 'Codecov status'
    required: false
    default: NO
  hypre-dir:
    description: 'hypre install location working dir'
    required: true
  metis-dir:
    description: 'metis install location working dir'
    required: true
  mfem-repo:
    description: 'Repo url for MFEM'
    required: false
    default: 'https://github.com/mfem/mfem.git'
  mfem-branch:
    description: 'Branch to checkout'
    required: false
    default: ''
  mfem-dir:
    description: 'mfem repo checkout location in working dir'
    required: true
  build-system:
    description: 'identify the build system to use (make,cmake)'
    required: false
    default: make
  library-only:
    description: 'only build the mfem library, without examples/tests/miniapps'
    required: false
    default: 'false'
  config-options:
    description: 'extra options to pass to build configuration'
    required: false
    default: ''

runs:
  using: "composite"
  steps:
    - name: configure mfem
      run: |
        echo "----------------------------"
        echo "--- Download source code ---"
        if [[ -n "${{ inputs.mfem-branch }}" ]]; then
          if [[ -d ${{ inputs.mfem-dir }} ]]; then
            echo "Error: Unknown use case"
            echo " Trying to change MFEM branch while MFEM is already present."
            echo " The use case supported are:"
            echo "  - MFEM CI: Use MFEM source checked out by Github."
            echo "  - MiniApp CI: Clone MFEM using a specific branch."
            exit 1;
          fi
          git clone --single-branch --branch ${{ inputs.mfem-branch }} --depth 1 ${{ inputs.mfem-repo }} ${{ inputs.mfem-dir }};
          echo "[INFO] MFEM clone: using ${{ inputs.mfem-branch }} branch"
        fi
        echo "-----------------------------"
        echo "--- Prepare Configuration ---"
        MPI="NO"
        if [[ ${{ inputs.mpi }} == 'par' ]]; then
          MPI="YES"
          # If the directory does not exist, we assume it was installed elsewhere and donâ€™t create the link
          if [[ -d ${{ inputs.hypre-dir }} ]]; then
            ln -s -f ${{ inputs.hypre-dir }} hypre;
            echo "[INFO] Hypre symlink: hypre -> ${{ inputs.hypre-dir }}"
          fi
          if [[ -d ${{ inputs.metis-dir }} ]]; then
            ln -s -f ${{ inputs.metis-dir }} metis-4.0;
            echo "[INFO] Metis symlink: metis -> ${{ inputs.metis-dir }}"
          fi
        fi
        echo "[STATUS] MPI: ${MPI}"
        CPPFLAGS=""
        DEBUG="NO"
        BUILD_TYPE="Release"
        if [[ ${{ inputs.target }} == 'dbg' ]]; then
          DEBUG="YES";
          BUILD_TYPE="Debug";
        fi
        if [[ ${{ runner.os }} != 'Linux' || \
              ${{ inputs.target }} == 'dbg' ]]; then
          CPPFLAGS+=" -pedantic -Wall -Werror";
        fi
        if [[ ${{ runner.os }} != 'Linux' && \
              ${{ inputs.target }} == 'dbg' ]]; then
          CPPFLAGS+=" -Wshadow";
        fi
        echo "[STATUS] DEBUG: ${DEBUG}"
        echo "[STATUS] BUILD_TYPE: ${BUILD_TYPE}"
        if [[ ${{ inputs.codecov }} == 'YES' ]]; then
          CPPFLAGS+=" --coverage -fPIC -g";
        fi
        echo "[STATUS] CPPFLAGS: ${CPPFLAGS}"
        echo "----------------------"
        echo "--- Configure mfem ---"
        cd ${{ inputs.mfem-dir }};
        if [[ ${{ inputs.build-system }} == 'cmake' ]]; then
            if [[ ${{ inputs.os }} == "windows-latest" ]]; then
              toolchain_file="${VCPKG_INSTALLATION_ROOT}\\scripts\\buildsystems\\vcpkg.cmake"
              vcpkg_triplet="x64-windows-static"
            fi
            mkdir build && cd build;
            cmake \
              -D CMAKE_TOOLCHAIN_FILE:STRING=${toolchain_file} \
              -D VCPKG_TARGET_TRIPLET=${vcpkg_triplet} \
              -D CMAKE_BUILD_TYPE=${BUILD_TYPE} \
              -D MFEM_USE_MPI=${MPI} \
              -D MFEM_MPI_NP=2 \
              -D HYPRE_DIR=../../hypre/install \
              ${{ inputs.config-options }} \
              ..
        else
            make config \
              MFEM_USE_MPI=${MPI} \
              MFEM_MPI_NP=2 \
              MFEM_DEBUG=${DEBUG} \
              CPPFLAGS="${CPPFLAGS}" \
              HYPRE_DIR=@MFEM_DIR@/../hypre/install \
              ${{ inputs.config-options }}
        fi
      shell: bash

    - name: build mfem
      run: |
        echo "------------------"
        echo "--- Build mfem ---"
        BUILD_TYPE="Release"
        [[ ${{ inputs.target }} == 'dbg' ]] && BUILD_TYPE="Debug";
        cd ${{ inputs.mfem-dir }}
        if [[ ${{ inputs.build-system }} == 'cmake' ]]; then
            CMAKE_TARGET="exec"
            [[ ${{ inputs.library-only }} == 'true' ]] && CMAKE_TARGET="mfem";
            cd build
            cmake --build . --parallel 3 --target ${CMAKE_TARGET} --config "${BUILD_TYPE}"
            if [[ ${{ inputs.library-only }} == 'false' ]]; then
              cmake --build tests/unit --parallel 3 --config "${BUILD_TYPE}"
            fi
        else
            MAKE_TARGET="all"
            [[ ${{ inputs.library-only }} == 'true' ]] && MAKE_TARGET="";
            make ${MAKE_TARGET} -j3
        fi
      shell: bash

